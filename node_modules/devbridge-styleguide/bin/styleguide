#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var mkdir = require('mkdirp'); // required to be able to create dirs recursively for multi level
var q = require('q');
var formatter = require('format-json');
var pkg = require('../package.json');
var path = require('path');
var stdin = process.stdin;
var stdout = process.stdout;
var startServer  = require('../index.js');

var initialCategories = [{
    name: 'Undefined',
    id: 0
}];

var getMainConfig = function(folder) {
    return {
        projectName: '',
        projectUrl: '',
        projectLogo: '',

        jsResources: [],
        viewportWidths: [320, 480, 768, 1024, 1200],

        serverPort: 8889,
        snippetTemplate: path.join('./', folder, 'template.html'),

        cssVariables: [],
        maxSassIterations: 2000,

        database: path.join('./', folder, 'db'),
        categories: path.join('./', folder, 'db', 'categories.txt'),
        uniques: path.join('./', folder, 'db', 'uniques.txt'),
        sassData: path.join('./', folder, 'db', 'sassdata.txt'),
        extension: '.txt'
    };
};

var copyContent = function(currentFolder, rootFolder, dbFolder) {
    var templateFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide', 'templates'),
        moduleFolder = path.join(currentFolder, 'node_modules', 'devbridge-styleguide'),
        currentContents,
        javascripts,
        fontsFolder;

    if (!fs.existsSync(rootFolder)) {
        mkdir.sync(rootFolder);
        mkdir.sync(dbFolder);
        mkdir.sync(path.join(rootFolder, 'content'));
        mkdir.sync(path.join(rootFolder, 'content', 'icons'));
        mkdir.sync(path.join(rootFolder, 'js'));

        currentContents = fs.readFileSync(path.join(moduleFolder, 'template.html'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'template.html'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'index.html'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'index.html'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'favicon.ico'));

        fs.writeFileSync(path.join(rootFolder, 'favicon.ico'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'main.css'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'main.css'), currentContents);

        //-----------SVGs---------------

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'db-logo.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'db-logo.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-github.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'logo-github.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'logo-npm.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'logo-npm.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'angle-arrow-down.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'angle-arrow-down.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'check.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'check.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code-css.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code-css.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'code-html.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'code-html.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'description.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'description.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'drag.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'drag.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'pencil.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'pencil.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'question.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'question.svg'), currentContents);

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'icons', 'trash.svg'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'icons', 'trash.svg'), currentContents);

        //-----------SVGs---------------

        currentContents = fs.readFileSync(path.join(templateFolder, 'content', 'your-logo.png'), 'utf-8');

        fs.writeFileSync(path.join(rootFolder, 'content', 'your-logo.png'), currentContents);

        //----------javascripts----------
        javascripts = fs.readdirSync(path.join(templateFolder, 'js'));

        for (var index = 0, len = javascripts.length; index < len; index++) {
            currentContents = fs.readFileSync(path.join(templateFolder, 'js', javascripts[index]), 'utf-8');
            fs.writeFileSync(path.join(rootFolder, 'js', javascripts[index]), currentContents);
        }
    }

};

var initialize = function(folder) {
    var stdin = process.stdin,
        stdout = process.stdout,
        currentFolder = process.cwd(),
        rootFolder,
        dbFolder;

    if (!folder) {
        folder = 'styleguide';
    }

    rootFolder = path.join(currentFolder, folder);
    dbFolder = path.join(rootFolder, 'db');

    stdin.resume();

    copyContent(currentFolder, rootFolder, dbFolder);

    for (var index = 0, len = initialCategories.length; index < len; index++) {
        fs.writeFileSync(path.join(dbFolder, initialCategories[index].name + '.txt'), formatter.plain([]));
    }

    fs.writeFileSync(path.join(dbFolder, 'uniques.txt'), formatter.plain([]));
    fs.writeFileSync(path.join(dbFolder, 'sassdata.txt'), formatter.plain([]));
    fs.writeFileSync(path.join(rootFolder, 'config.txt'), formatter.plain(getMainConfig(folder)));
    fs.writeFileSync(path.join(dbFolder, 'categories.txt'), formatter.plain(initialCategories));

    stdout.write('Styleguide was successfully initialized in working directory!');

    process.exit(0);

};

program
    .version(pkg.version)
    .description(pkg.description)
    .usage('<command>');

program
    .command('initialize [folder]')
    .description('initialize styleguide in working directory, if no folder specified - defaults to ./styleguide')
    .action(initialize);

program
    .command('start')
    .description('Starts styleguide server API')
    .action(startServer.startServer);

program.parse(process.argv);
